#TIME SERIES ANALYSIS AND FORECASTING FOR STOCK MARKET

This project aims to analyze and forecast stock market trends using time series analysis techniques.

#Import libraries

# üì¶ DATA HANDLING & ANALYSIS
import pandas as pd
import numpy as np

# üìä VISUALIZATION
import matplotlib.pyplot as plt
import seaborn as sns

# ‚ö†Ô∏è WARNINGS
import warnings
warnings.filterwarnings("ignore")

# ‚è±Ô∏è TIME SERIES ANALYSIS (Statistical Models)
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX

# üîÆ TIME SERIES FORECASTING (Facebook Prophet)
from prophet import Prophet

# ü§ñ DEEP LEARNING (LSTM)
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler

# üìà MODEL EVALUATION METRICS
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score


# üßæ Load data
df = pd.read_csv("/content/stock_data.csv")

df.head()

df.tail()

df.columns

df.describe()

df.info()

df.isna().sum()

df.Name.unique()

# üïì Convert 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# üìÖ Sort by date to maintain chronological order
df.sort_values('Date', inplace=True)

# üîÅ Set Date as index for time series analysis
df.set_index('Date', inplace=True)

# üßæ Use only the 'Close' column for forecasting
close_data = df['Close'].asfreq('D')  # Daily frequency

# üîÅ Forward-fill any NaNs from asfreq gaps
close_data = close_data.ffill()


# üìä Quick visualization
plt.figure(figsize=(12, 4))
plt.plot(close_data)
plt.title("AABA Stock Close Price Over Time")
plt.xlabel("Date")
plt.ylabel("Close Price")
plt.grid(True)
plt.show()


üîç TIME SERIES DECOMPOSITION (TREND, SEASONALITY, RESIDUALS)

# Decompose the time series
decomposition = seasonal_decompose(close_data, model='additive', period=365)

# Plot components: Trend, Seasonality, Residuals
decomposition.plot()
plt.tight_layout()
plt.show()

# @title
# from statsmodels.tsa.seasonal import seasonal_decompose
# import matplotlib.pyplot as plt

# # Perform seasonal decomposition
# decomposition = seasonal_decompose(close_data, model='additive', period=365)

# # Extract components
# trend = decomposition.trend
# seasonal = decomposition.seasonal
# residual = decomposition.resid
# observed = decomposition.observed

# # Set up the plot
# plt.figure(figsize=(14, 10))

# # 1. Observed (Original Time Series)
# plt.subplot(411)
# plt.plot(observed, color='blue')
# plt.title('üìà Observed: Original Stock Close Price', fontsize=12)
# plt.ylabel("Price")
# plt.grid(True)

# # 2. Trend
# plt.subplot(412)
# plt.plot(trend, color='green')
# plt.title('üìä Trend: Long-term Price Movement', fontsize=12)
# plt.ylabel("Trend")
# plt.grid(True)

# # 3. Seasonality
# plt.subplot(413)
# plt.plot(seasonal, color='orange')
# plt.title('üîÅ Seasonal: Repeating Yearly Patterns', fontsize=12)
# plt.ylabel("Seasonality")
# plt.grid(True)

# # 4. Residuals
# plt.subplot(414)
# plt.plot(residual, color='red')
# plt.title('üéØ Residual: Irregular or Random Noise', fontsize=12)
# plt.ylabel("Residual")
# plt.xlabel("Date")
# plt.grid(True)

# plt.tight_layout()
# plt.show()


# @title
# Decompose the time series
decomposition = seasonal_decompose(close_data, model='multiplicative', period=365)

# Plot components: Trend, Seasonality, Residuals
decomposition.plot()
plt.tight_layout()
plt.show()

ARIMA Model Forecasting for Stock Prices (Next 365 Business Days)

#AutoRegressive Integrated Moving Average

arima_model = ARIMA(close_data, order=(5, 1, 0))
arima_fit = arima_model.fit()
arima_forecast = arima_fit.forecast(steps=365)

arima_forecast_index = pd.date_range(start=close_data.index[-1] + pd.Timedelta(days=1), periods=365, freq='B')
arima_forecast = pd.Series(arima_forecast, index=arima_forecast_index)

# Plot
plt.figure(figsize=(12,6))
plt.plot(close_data, label='Historical')
plt.plot(arima_forecast, label='ARIMA Forecast (365 days)')
plt.legend()
plt.title('ARIMA 365-Day Forecast')
plt.xlabel('Date')
plt.ylabel('Value')
plt.grid(True)
plt.show()


SARIMA Model Forecasting for Stock Prices (Next 365 Business Days)

# Define SARIMA model (tune seasonal_order)

# Seasonal AutoRegressive Integrated Moving Average
sarima_model = SARIMAX(close_data, order=(1,1,1), seasonal_order=(1,1,1,12))
sarima_fit = sarima_model.fit()

# Forecast
sarima_forecast = sarima_fit.forecast(steps=365)
sarima_forecast_index = pd.date_range(start=close_data.index[-1] + pd.Timedelta(days=1), periods=365, freq='B')
sarima_forecast = pd.Series(sarima_forecast, index=sarima_forecast_index)

# Plot
plt.figure(figsize=(12,6))
plt.plot(close_data, label='Historical')
plt.plot(sarima_forecast, label='SARIMA Forecast (365 days)')
plt.legend()
plt.title('SARIMA 365-Day Forecast')
plt.xlabel('Date')
plt.ylabel('Value')
plt.grid(True)
plt.show()

Prophet Model Forecasting for Stock Prices (Next 365 Business Days)

# Prepare data (Historical data)
df_prophet = close_data.reset_index()
df_prophet.columns = ['ds', 'y']   #ds: Date column (datetime type),y: Actual values (e.g., closing prices)

# Fit model
model = Prophet()
model.fit(df_prophet) #The model learns patterns (trends, seasonality, etc.) from your historical data.

# Forecast
future = model.make_future_dataframe(periods=365,freq='B')
forecast_prophet = model.predict(future)

# Extract forecast series
prophet_forecast = forecast_prophet.set_index('ds')['yhat']

# Plot full forecast
fig = model.plot(forecast_prophet)
plt.title('Prophet 365-Day Forecast')
plt.xlabel('Date')
plt.ylabel('Value')
plt.grid(True)
plt.show()

# Optional: Plot only the forecast portion
forecast_365 = forecast_prophet.set_index('ds').loc[close_data.index[-1]:]['yhat']
plt.figure(figsize=(12,6))
plt.plot(close_data, label='Historical')
plt.plot(forecast_365, label='Prophet Forecast (365 days)')
plt.legend()
plt.grid(True)
plt.title('Prophet 365-Day Forecast')
plt.xlabel('Date')
plt.ylabel('Value')
plt.show()

LSTM-Based 365-Day Time Series Forecasting using Scaled Historical Data

# Ensure close_data is a NumPy array
data_array = close_data.values.reshape(-1, 1)

# Scale data to range [0,1]
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data_array)

# Create sequences for LSTM
def create_sequences(data, window_size=60):
    X, y = [], []                         # Initialize empty lists for inputs and targets
    for i in range(window_size, len(data)):
        X.append(data[i-window_size:i, 0])      # for i in range (60,3080)//x=(0-59),y=60
        y.append(data[i, 0])
    return np.array(X), np.array(y)

X, y = create_sequences(scaled_data)
X = X.reshape((X.shape[0], X.shape[1], 1))  # 3D input for LSTM

# Define LSTM model
model_lstm = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)),
    LSTM(50),
    Dense(1)
])

model_lstm.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model_lstm.fit(X, y, epochs=10, batch_size=32)

# Inverse transform
lstm_forecast = scaler.inverse_transform(np.array(predictions).reshape(-1, 1)).flatten()
lstm_forecast_index = pd.date_range(start=close_data.index[-1] + pd.Timedelta(days=1), periods=365, freq='B')
lstm_forecast = pd.Series(lstm_forecast, index=lstm_forecast_index)

# Plot
plt.figure(figsize=(12,6))
plt.plot(close_data, label='Historical')
plt.plot(lstm_forecast, label='LSTM Forecast (365 days)')
plt.legend()
plt.title('LSTM 365-Day Forecast')
plt.xlabel('Date')
plt.ylabel('Value')
plt.grid(True)
plt.show()

def rmse(true, pred):
    return np.sqrt(mean_squared_error(true, pred))

# Split historical data into training and test sets (e.g., last 365 days as test; rest is training.)
train = close_data[:-365]
test = close_data[-365:]

# # Prepare Prophet input
df_prophet_train = train.reset_index().rename(columns={'Date': 'ds', 'Close': 'y'})
model_prophet = Prophet()
model_prophet.fit(df_prophet_train)

# Forecast on the test period
future = model_prophet.make_future_dataframe(periods=365)
forecast = model_prophet.predict(future)
forecast_prophet = forecast.set_index('ds')['yhat'][-365:]

# Evaluate

mse = mean_squared_error(test, forecast_prophet)
rmse = np.sqrt(mse)
mae = mean_absolute_error(test, forecast_prophet)
r2 = r2_score(test, forecast_prophet)

print("Prophet Evaluation on Test Set:")
print(f"MSE : {mse:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"MAE : {mae:.4f}")
print(f"R¬≤  : {r2:.4f}")


model_arima = ARIMA(train, order=(5, 1, 0))
results_arima = model_arima.fit()
forecast_arima = results_arima.forecast(steps=365)

mse = mean_squared_error(test, forecast_arima)
rmse = np.sqrt(mse)
mae = mean_absolute_error(test, forecast_arima)
r2 = r2_score(test, forecast_arima)

print("üìä ARIMA Evaluation on Test Set")
print(f"MSE : {mse:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"MAE : {mae:.4f}")
print(f"R¬≤  : {r2:.4f}")

model_sarima = SARIMAX(train, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))
results_sarima = model_sarima.fit()
forecast_sarima = results_sarima.forecast(steps=365)

mse = mean_squared_error(test, forecast_sarima)
rmse = np.sqrt(mse)
mae = mean_absolute_error(test, forecast_sarima)
r2 = r2_score(test, forecast_sarima)

print("üìä SARIMA Evaluation on Test Set")
print(f"MSE : {mse:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"MAE : {mae:.4f}")
print(f"R¬≤  : {r2:.4f}")


scaler = MinMaxScaler()
scaled_train = scaler.fit_transform(train.values.reshape(-1, 1))

X_train, y_train = [], []
for i in range(60, len(scaled_train)):
    X_train.append(scaled_train[i-60:i])
    y_train.append(scaled_train[i])

X_train = np.array(X_train).reshape((-1, 60, 1))
y_train = np.array(y_train)

model = Sequential()
model.add(LSTM(50, return_sequences=False, input_shape=(60, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=20, batch_size=32, verbose=0)

total_data = pd.concat([train[-60:], test])
scaled_total = scaler.transform(total_data.values.reshape(-1, 1))

X_test = []
for i in range(60, len(scaled_total)):
    X_test.append(scaled_total[i-60:i])
X_test = np.array(X_test).reshape((-1, 60, 1))

lstm_preds = model.predict(X_test, verbose=0)
lstm_preds = scaler.inverse_transform(lstm_preds).flatten()

mse = mean_squared_error(test, lstm_preds)
rmse = np.sqrt(mse)
mae = mean_absolute_error(test, lstm_preds)
r2 = r2_score(test, lstm_preds)

print("üìä LSTM Evaluation on Test Set")
print(f"MSE : {mse:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"MAE : {mae:.4f}")
print(f"R¬≤  : {r2:.4f}")
